
/*
 * Generate Hyperlambda code
 * 
 * This function allows you to generate Hyperlambda code. The [query] argument must be the description of what code you want.
 */
.arguments

   // Mandatory argument describing the Hyperlambda code you want to generate.
   query:string

   // Optional argument being code you want the AI function to change.
   old_code:string

.type:public

try

   // Checking if we've got previously generated code
   if
      and
         exists:x:@.arguments/*/old_code
         not-null:x:@.arguments/*/old_code
      .lambda

         // Making sure we pass in previous code to LLM.
         set-value:x:@.arguments/*/query
            strings.concat
               get-value:x:@.arguments/*/query
               .:"\r\n\r\n"
               .:"```hyperlambda\r\n"
               strings.trim:x:@.arguments/*/old_code
               .:"\r\n```"

   /*
    * Invokes OpenAI's chat API with the specified [model], [max_tokens], [context],
    * [instruction] and [query].
    *
    * Will use the default API key found from configurations.
    *
    * [context] is additional data you can supply to OpenAI such that it responds using
    * your data as its source for information. [instruction] is a system message allowing
    * you to change how OpenAI responds.
    */
   execute:magic.workflows.actions.execute
      name:openai-query
      filename:/modules/openai/workflows/actions/openai-query.hl
      arguments
         model:"ft:gpt-4o-mini-2024-07-18:ainiro:hl:BIZ6E58g"
         max_tokens:int:2500
         temperature:decimal:0.0
         query:x:@.arguments/*/query
         instruction:@"You are a Hyperlambda software development assistant. Your task is to generate and respond with Hyperlambda solving the task you've been asked to solve."

   // Storing prompt/completion into our database.
   data.connect:hyperlambda-generator
      data.create
         table:requests
         values
            prompt:x:@.arguments/*/query
            completion:x:@execute/*/answer

   // Returns the result of your last action.
   yield
      new_code:x:@execute/*/answer

.catch
   lambda2hyper:x:../*
   log.error:x:@.arguments/*/message
      stack:x:@lambda2hyper
